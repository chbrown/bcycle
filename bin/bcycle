#!/usr/bin/env node
var logger = require('loge');
var database = require('../database');
var publicapi = require('../publicapi');

var yargs = require('yargs')
  .command('initialize', 'Initialize the database and fetch current programs')
  .command('loop', 'Periodically fetch the station statuses from a url and store')
  .describe({
    key: 'B-cycle API key',
    interval: 'interval to wait between fetches while watching (in milliseconds)',
    help: 'print this help message',
    verbose: 'print extra output',
    version: 'print version',
  })
  .boolean(['help', 'verbose', 'version'])
  .default({
    key: process.env.BCYCLE_API_KEY,
    interval: 60*1000, // every 60 seconds
    verbose: process.env.DEBUG !== undefined,
  });

var argv = yargs.argv;
logger.level = argv.verbose ? 'debug' : 'info';

if (argv.help) {
  yargs.showHelp();
}
else if (argv.version) {
  console.log(require('../package').version);
}
else {
  argv = yargs.demand(1, 'you must provide a valid command').argv;
  var public_api = new publicapi.PublicAPI(argv.key);
  var command = argv._[0];
  if (command === 'initialize') {
    database.initialize(function(error) {
      if (error) throw error;
      database.fetchPrograms(public_api, function(error) {
        if (error) throw error;
        // delete the program with no kiosks
        database.db.Delete('program')
        .whereEqual({bcycle_program_id: 49})
        .execute(function(error) {
          if (error) throw error;
          logger.info('Done with initialization');
          process.exit(0);
        });
      });
    });
  }
  else if (command === 'fetchNext') {
    database.fetchNext(public_api, function(error) {
      if (error) throw error;
      process.exit(0);
    });
  }
  else if (command === 'loop') {
    database.loop(public_api, argv.interval, function(error) {
      if (error) throw error;
      // loop should never callback without an error
      process.exit(1);
    });
  }
  else {
    yargs.showHelp();
  }
}

