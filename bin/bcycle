#!/usr/bin/env node
const loge = require('loge')
const database = require('../database')

const logger = loge.logger

const commands = [
  {
    id: 'initialize',
    description: "Initialize the database and fetch current programs",
    run(ApiKey) {
      database.createAndRunMigrations(error => {
        if (error) throw error
        database.fetchPrograms(ApiKey, error => {
          if (error) throw error
          // delete the program with no kiosks
          database.db.Delete('program')
          .whereEqual({bcycle_program_id: 49})
          .execute(error => {
            if (error) throw error
            logger.info('Done with initialization')
            process.exit(0)
          })
        })
      })
    },
  },
  {
    id: 'fetchNext',
    description: "Fetch the next (last fetched) kiosk statuses and store them in the database",
    run(ApiKey) {
      database.fetchNext(ApiKey, error => {
        if (error) throw error
        process.exit(0)
      })
    },
  },
  {
    id: 'loop',
    description: "Periodically fetch each program's kiosk statuses and store them in the database",
    run(ApiKey, argv) {
      database.loop(ApiKey, argv.interval, error => {
        if (error) throw error
        // loop should never callback without an error
        process.exit(1)
      })
    },
  },
]

function main() {
  const usage = [
    'Usage: bcycle <command> <filename> [<args>]',
    '',
    'Commands:',
    ...commands.map(command => `  ${command.id}: ${command.description}`),
  ].join('\n')
  const argvparser = require('optimist')
  .usage(usage)
  .describe({
    key: 'B-cycle API key',
    interval: 'interval to wait between fetches while watching (in milliseconds)',
    help: 'print this help message',
    verbose: 'print extra output',
    version: 'print version',
  })
  .boolean(['help', 'verbose', 'version'])
  .default({
    key: process.env.BCYCLE_API_KEY,
    interval: 60*1000, // every 60 seconds
    verbose: process.env.DEBUG !== undefined,
  })

  let argv = argvparser.argv
  logger.level = argv.verbose ? loge.Level.debug : loge.Level.info

  if (argv.help) {
    argvparser.showHelp()
  }
  else if (argv.version) {
    console.log(require('../package').version)
  }
  else {
    argv = argvparser.demand(1).argv
    const ApiKey = argv.key
    const command_id = argv._[0]
    const command = commands.filter(command => command.id === command_id)[0]
    if (command === undefined) {
      console.log(`Unrecognized command: "${command_id}"`)
      argvparser.showHelp()
      process.exit(1)
    }
    command.run(ApiKey, argv)
  }
}

if (require.main === module) {
  main()
}
